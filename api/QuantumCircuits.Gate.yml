### YamlMime:ManagedReference
items:
- uid: QuantumCircuits.Gate
  commentId: T:QuantumCircuits.Gate
  id: Gate
  parent: QuantumCircuits
  children:
  - QuantumCircuits.Gate.#ctor(QuantumCircuits.GateTypes,LinearAlgebra.SparseMatrix,System.Int32[],System.Int32[])
  - QuantumCircuits.Gate.Controls
  - QuantumCircuits.Gate.Operation
  - QuantumCircuits.Gate.Targets
  - QuantumCircuits.Gate.ToString
  - QuantumCircuits.Gate.Type
  langs:
  - csharp
  - vb
  name: Gate
  nameWithType: Gate
  fullName: QuantumCircuits.Gate
  type: Class
  source:
    remote:
      path: src/QuantumCircuits/Gate.cs
      branch: main
      repo: https://github.com/0RenDev/Quantum-Computing-Tool.git
    id: Gate
    path: src/QuantumCircuits/Gate.cs
    startLine: 84
  namespace: QuantumCircuits
  summary: Constuctor for a Quantum Gate
  example: []
  syntax:
    content: public class Gate
    content.vb: Public Class Gate
  inheritance:
  - System.Object
  derivedClasses:
  - QuantumCircuits.CX
  - QuantumCircuits.H
  - QuantumCircuits.NOP
  - QuantumCircuits.RX
  - QuantumCircuits.RY
  - QuantumCircuits.RZ
  - QuantumCircuits.SWAP
  - QuantumCircuits.T
  - QuantumCircuits.Toff
  - QuantumCircuits.X
  - QuantumCircuits.Y
  - QuantumCircuits.Z
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
- uid: QuantumCircuits.Gate.#ctor(QuantumCircuits.GateTypes,LinearAlgebra.SparseMatrix,System.Int32[],System.Int32[])
  commentId: M:QuantumCircuits.Gate.#ctor(QuantumCircuits.GateTypes,LinearAlgebra.SparseMatrix,System.Int32[],System.Int32[])
  id: '#ctor(QuantumCircuits.GateTypes,LinearAlgebra.SparseMatrix,System.Int32[],System.Int32[])'
  parent: QuantumCircuits.Gate
  langs:
  - csharp
  - vb
  name: Gate(GateTypes, SparseMatrix, int[], int[])
  nameWithType: Gate.Gate(GateTypes, SparseMatrix, int[], int[])
  fullName: QuantumCircuits.Gate.Gate(QuantumCircuits.GateTypes, LinearAlgebra.SparseMatrix, int[], int[])
  type: Constructor
  source:
    remote:
      path: src/QuantumCircuits/Gate.cs
      branch: main
      repo: https://github.com/0RenDev/Quantum-Computing-Tool.git
    id: .ctor
    path: src/QuantumCircuits/Gate.cs
    startLine: 84
  namespace: QuantumCircuits
  summary: Constuctor for a Quantum Gate
  example: []
  syntax:
    content: public Gate(GateTypes type, SparseMatrix operation, int[] controls, int[] targets)
    parameters:
    - id: type
      type: QuantumCircuits.GateTypes
      description: The <xref href="QuantumCircuits.GateTypes" data-throw-if-not-resolved="false"></xref> of the gate
    - id: operation
      type: LinearAlgebra.SparseMatrix
      description: A <xref href="LinearAlgebra.SparseMatrix" data-throw-if-not-resolved="false"></xref> of the gate's operator matrix
    - id: controls
      type: System.Int32[]
      description: The control qubits as an array of qubits (as indexes)
    - id: targets
      type: System.Int32[]
      description: The target qubits as an array of qubits (as indexes)
    content.vb: Public Sub New(type As GateTypes, operation As SparseMatrix, controls As Integer(), targets As Integer())
  overload: QuantumCircuits.Gate.#ctor*
  nameWithType.vb: Gate.New(GateTypes, SparseMatrix, Integer(), Integer())
  fullName.vb: QuantumCircuits.Gate.New(QuantumCircuits.GateTypes, LinearAlgebra.SparseMatrix, Integer(), Integer())
  name.vb: New(GateTypes, SparseMatrix, Integer(), Integer())
- uid: QuantumCircuits.Gate.Type
  commentId: P:QuantumCircuits.Gate.Type
  id: Type
  parent: QuantumCircuits.Gate
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: Gate.Type
  fullName: QuantumCircuits.Gate.Type
  type: Property
  source:
    remote:
      path: src/QuantumCircuits/Gate.cs
      branch: main
      repo: https://github.com/0RenDev/Quantum-Computing-Tool.git
    id: Type
    path: src/QuantumCircuits/Gate.cs
    startLine: 89
  namespace: QuantumCircuits
  summary: The type of gate. See <xref href="QuantumCircuits.GateTypes" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public GateTypes Type { get; }
    parameters: []
    return:
      type: QuantumCircuits.GateTypes
    content.vb: Public Property Type As GateTypes
  overload: QuantumCircuits.Gate.Type*
- uid: QuantumCircuits.Gate.Operation
  commentId: P:QuantumCircuits.Gate.Operation
  id: Operation
  parent: QuantumCircuits.Gate
  langs:
  - csharp
  - vb
  name: Operation
  nameWithType: Gate.Operation
  fullName: QuantumCircuits.Gate.Operation
  type: Property
  source:
    remote:
      path: src/QuantumCircuits/Gate.cs
      branch: main
      repo: https://github.com/0RenDev/Quantum-Computing-Tool.git
    id: Operation
    path: src/QuantumCircuits/Gate.cs
    startLine: 94
  namespace: QuantumCircuits
  summary: The operator matrix of the gate
  example: []
  syntax:
    content: public SparseMatrix Operation { get; }
    parameters: []
    return:
      type: LinearAlgebra.SparseMatrix
    content.vb: Public Property Operation As SparseMatrix
  overload: QuantumCircuits.Gate.Operation*
- uid: QuantumCircuits.Gate.Controls
  commentId: P:QuantumCircuits.Gate.Controls
  id: Controls
  parent: QuantumCircuits.Gate
  langs:
  - csharp
  - vb
  name: Controls
  nameWithType: Gate.Controls
  fullName: QuantumCircuits.Gate.Controls
  type: Property
  source:
    remote:
      path: src/QuantumCircuits/Gate.cs
      branch: main
      repo: https://github.com/0RenDev/Quantum-Computing-Tool.git
    id: Controls
    path: src/QuantumCircuits/Gate.cs
    startLine: 99
  namespace: QuantumCircuits
  summary: The control qubits
  example: []
  syntax:
    content: public int[] Controls { get; protected set; }
    parameters: []
    return:
      type: System.Int32[]
    content.vb: Public Property Controls As Integer()
  overload: QuantumCircuits.Gate.Controls*
- uid: QuantumCircuits.Gate.Targets
  commentId: P:QuantumCircuits.Gate.Targets
  id: Targets
  parent: QuantumCircuits.Gate
  langs:
  - csharp
  - vb
  name: Targets
  nameWithType: Gate.Targets
  fullName: QuantumCircuits.Gate.Targets
  type: Property
  source:
    remote:
      path: src/QuantumCircuits/Gate.cs
      branch: main
      repo: https://github.com/0RenDev/Quantum-Computing-Tool.git
    id: Targets
    path: src/QuantumCircuits/Gate.cs
    startLine: 104
  namespace: QuantumCircuits
  summary: The target qubits
  example: []
  syntax:
    content: public int[] Targets { get; protected set; }
    parameters: []
    return:
      type: System.Int32[]
    content.vb: Public Property Targets As Integer()
  overload: QuantumCircuits.Gate.Targets*
- uid: QuantumCircuits.Gate.ToString
  commentId: M:QuantumCircuits.Gate.ToString
  id: ToString
  parent: QuantumCircuits.Gate
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Gate.ToString()
  fullName: QuantumCircuits.Gate.ToString()
  type: Method
  source:
    remote:
      path: src/QuantumCircuits/Gate.cs
      branch: main
      repo: https://github.com/0RenDev/Quantum-Computing-Tool.git
    id: ToString
    path: src/QuantumCircuits/Gate.cs
    startLine: 110
  namespace: QuantumCircuits
  summary: Returns the <xref href="System.String" data-throw-if-not-resolved="false"></xref> representation of the Gate
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: ''
    content.vb: Public Overrides Function ToString() As String
  overridden: System.Object.ToString
  overload: QuantumCircuits.Gate.ToString*
references:
- uid: QuantumCircuits.GateTypes
  commentId: T:QuantumCircuits.GateTypes
  parent: QuantumCircuits
  href: QuantumCircuits.GateTypes.html
  name: GateTypes
  nameWithType: GateTypes
  fullName: QuantumCircuits.GateTypes
- uid: LinearAlgebra.SparseMatrix
  commentId: T:LinearAlgebra.SparseMatrix
  parent: LinearAlgebra
  href: LinearAlgebra.SparseMatrix.html
  name: SparseMatrix
  nameWithType: SparseMatrix
  fullName: LinearAlgebra.SparseMatrix
- uid: QuantumCircuits
  commentId: N:QuantumCircuits
  href: QuantumCircuits.html
  name: QuantumCircuits
  nameWithType: QuantumCircuits
  fullName: QuantumCircuits
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: LinearAlgebra
  commentId: N:LinearAlgebra
  href: LinearAlgebra.html
  name: LinearAlgebra
  nameWithType: LinearAlgebra
  fullName: LinearAlgebra
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: QuantumCircuits.Gate.#ctor*
  commentId: Overload:QuantumCircuits.Gate.#ctor
  href: QuantumCircuits.Gate.html#QuantumCircuits_Gate__ctor_QuantumCircuits_GateTypes_LinearAlgebra_SparseMatrix_System_Int32___System_Int32___
  name: Gate
  nameWithType: Gate.Gate
  fullName: QuantumCircuits.Gate.Gate
  nameWithType.vb: Gate.New
  fullName.vb: QuantumCircuits.Gate.New
  name.vb: New
- uid: System.Int32[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int[]
  nameWithType: int[]
  fullName: int[]
  nameWithType.vb: Integer()
  fullName.vb: Integer()
  name.vb: Integer()
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: )
- uid: QuantumCircuits.Gate.Type*
  commentId: Overload:QuantumCircuits.Gate.Type
  href: QuantumCircuits.Gate.html#QuantumCircuits_Gate_Type
  name: Type
  nameWithType: Gate.Type
  fullName: QuantumCircuits.Gate.Type
- uid: QuantumCircuits.Gate.Operation*
  commentId: Overload:QuantumCircuits.Gate.Operation
  href: QuantumCircuits.Gate.html#QuantumCircuits_Gate_Operation
  name: Operation
  nameWithType: Gate.Operation
  fullName: QuantumCircuits.Gate.Operation
- uid: QuantumCircuits.Gate.Controls*
  commentId: Overload:QuantumCircuits.Gate.Controls
  href: QuantumCircuits.Gate.html#QuantumCircuits_Gate_Controls
  name: Controls
  nameWithType: Gate.Controls
  fullName: QuantumCircuits.Gate.Controls
- uid: QuantumCircuits.Gate.Targets*
  commentId: Overload:QuantumCircuits.Gate.Targets
  href: QuantumCircuits.Gate.html#QuantumCircuits_Gate_Targets
  name: Targets
  nameWithType: Gate.Targets
  fullName: QuantumCircuits.Gate.Targets
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: QuantumCircuits.Gate.ToString*
  commentId: Overload:QuantumCircuits.Gate.ToString
  href: QuantumCircuits.Gate.html#QuantumCircuits_Gate_ToString
  name: ToString
  nameWithType: Gate.ToString
  fullName: QuantumCircuits.Gate.ToString
